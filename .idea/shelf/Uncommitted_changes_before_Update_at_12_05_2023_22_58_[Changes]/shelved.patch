Index: src/main/java/File/CollectionManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package File;\r\n\r\nimport Base.Comparator.ComparatorAge;\r\nimport Base.Comparator.ComparatorLenght;\r\nimport Base.Dragon;\r\nimport Base.DragonType;\r\nimport DataBase.MainDataBase;\r\nimport DataBase.Users;\r\nimport IO.AllAdd;\r\nimport IO.UserDragon;\r\nimport MyException.NotIdException;\r\nimport java.io.*;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.*;\r\n\r\n/**\r\n * Класс, выполняющий основые методы для работы с коллекцией\r\n */\r\npublic class CollectionManager {\r\n    VotTvoyId votTvoyId = new VotTvoyId();\r\n\r\n    /**\r\n     * Объект класса UserDragon\r\n     */\r\n    UserDragon userDragon = new UserDragon();\r\n    /**\r\n     * Объект класса AllAdd\r\n     */\r\n    AllAdd allAdd = new AllAdd(userDragon);\r\n    /**\r\n     * The Comparator age - по возрасту и весу\r\n     */\r\n    ComparatorAge comparatorAge = new ComparatorAge();\r\n\r\n    /**\r\n     * Основная коллекция\r\n     */\r\n    private static final LinkedList<Dragon> baseList = new LinkedList<>();\r\n\r\n\r\n\r\n\r\n    public static LinkedList<Dragon> getDragons(){\r\n        return baseList;\r\n    }\r\n\r\n    /**\r\n     * Метод, проверяющий коллекцию на пустоту\r\n     *\r\n     * @param dragons the dragons\r\n     * @return the boolean - возвращает boolean\r\n     */\r\n    public boolean isCollectEmpty(LinkedList<Dragon> dragons){\r\n     return dragons.size() == 0;\r\n }\r\n\r\n public LinkedList<Dragon> retCreator(LinkedList<Dragon> dragons){\r\n     LinkedList<Dragon> dragonss = new LinkedList<>();\r\n     for(Dragon dragon : dragons){\r\n         if(Objects.equals(Users.getCurrentUser(), dragon.getCreator())){\r\n             dragons.add(dragon);\r\n         }\r\n     }\r\n     return dragonss;\r\n\r\n }\r\n    public LinkedList<Long> checkId(LinkedList<Dragon> dragons){\r\n        LinkedList<Long> id = new LinkedList<>();\r\n        int num = dragons.size()+1;\r\n        for (int i = 1; i <= num; i++) {\r\n            id.add((long) i);\r\n        }\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Метод, который выводит информацию о коллекции\r\n     */\r\n    public void getInfo() {\r\n        System.out.println(\"Коллекция \" + baseList.getClass().getSimpleName());\r\n        System.out.println(\"Тип элементов коллекции: \" + Dragon.class.getSimpleName());\r\n        System.out.println(\"Количество элементов в базе данных : \" + baseList.size());\r\n\r\n        System.out.println(\"Количество элементов созданных вами\"+retCreator(baseList).size());\r\n         String formattedDateTime = Users.time.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\r\n        System.out.println(\"Время входа в аккаунт: \" + formattedDateTime);\r\n    }\r\n\r\n\r\n    /**\r\n     * Коллекция, удаляющая дракона с таким же типом, как в аргументе\r\n     *\r\n     * @param type the type - входящая информация от пользователя\r\n     */\r\n    public void removeByType(String type) {\r\n        if(isCollectEmpty(baseList)){\r\n            System.err.println(\"Коллекция пуста. Команда бесполезна\");\r\n            return;\r\n        }\r\n        boolean check = false;\r\n        String c = type.toUpperCase(Locale.ROOT);\r\n        LinkedList<Dragon> listType = new LinkedList<>(baseList);\r\n\r\n\r\n        for (Dragon dragon : listType) {\r\n            DragonType a = dragon.getType();\r\n            String b = a.toString();\r\n            if (b.equals(c) & Objects.equals(dragon.getCreator(), Users.getCurrentUser())) {\r\n                baseList.remove(dragon);\r\n                System.err.println(\"Дракон с именем \" + dragon.getName() + \" удален\");\r\n                check = true;\r\n            }\r\n        }\r\n        if(!check){\r\n            System.err.println(\"Ни один дракон не удален. Ни у кого нет типа = \"+type+ \"или же его имеет дракон созданный не вами\");\r\n        }\r\n        votTvoyId.votIdBad(baseList);\r\n    }\r\n\r\n\r\n\r\n//готово\r\n    /**\r\n     * Метод, очищающий коллекцию\r\n     */\r\n    public void clear() {\r\n        LinkedList<Dragon> clearest = retCreator(baseList);\r\n        for(Dragon dragon : clearest){\r\n            baseList.remove(dragon);\r\n        }\r\n        System.out.println(\"Все ваши драконы удалены успешно\");\r\n    }\r\n\r\n\r\n    /**\r\n     * Метод, удаляющий объект по ID, который вводит пользователь\r\n     *\r\n     * @param id the id\r\n     */\r\n    public void removeById(Long id) {\r\n        if(isCollectEmpty(baseList)){\r\n            System.err.println(\"Коллекция пуста. Команда бесполезна\");\r\n            return;\r\n        }\r\n        for (int i = 0; i < baseList.size(); i++) {\r\n            Dragon dragon = baseList.get(i);\r\n            Long check = baseList.get(i).getId();\r\n            if (Objects.equals(check, id) & Objects.equals(dragon.getCreator(), Users.getCurrentUser())) {\r\n                baseList.remove(i);\r\n                System.out.println(\"Дракон с id = \" + id + \" удален успешно\");\r\n                System.out.println(\"Теперь коллекция содержит \"+baseList.size()+\" элементов\");\r\n                votTvoyId.votIdBad(baseList);\r\n                return;\r\n            }\r\n        }\r\n        System.err.println(\"Дракона с id = \" + id + \" не существует\");\r\n    }\r\n\r\n//готово\r\n    /**\r\n     * Метод, выводящий коллекцию\r\n     */\r\n    public void show() {\r\n        if (baseList.size() == 0) {\r\n            System.err.println(\"Коллекция пуста\");\r\n        } else {\r\n            for (int i = 0; i < baseList.size(); i++) {\r\n                System.out.println(\"Элемент коллекции №\" + (i + 1) + \" :\" + baseList.get(i).toString());\r\n            }\r\n        }\r\n    }\r\n\r\n//готово\r\n    /**\r\n     * Метод, выводящий на экран драконов отсортированных по возрасту\r\n     */\r\n    public void printAscedingAge() {\r\n        if(isCollectEmpty(baseList)){\r\n            System.err.println(\"Коллекция пуста. Команда бесполезна\");\r\n            return;\r\n        }\r\n        LinkedList<Integer> agess = new LinkedList<>();\r\n        LinkedList<Dragon> age = new LinkedList<>(baseList);\r\n        for (Dragon dragon : baseList) {\r\n            agess.add(dragon.getAge());\r\n        }\r\n        agess.sort(Comparator.comparingInt(a -> a));\r\n        for (Integer findAge : agess) {\r\n            for (int b = 0; b < age.size(); b++) {\r\n                Dragon dragon = age.get(b);\r\n                if (Objects.equals(findAge, dragon.getAge())) {\r\n\r\n                    System.out.println(\" Возрасту \" + findAge + \" соответствует дракону \" + dragon.getName());\r\n                    age.remove(dragon);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n//готово\r\n    /**\r\n     * Метод, выводящий на экран драконов отсортированных по типу\r\n     */\r\n    public void printDescendingType() {\r\n        if(isCollectEmpty(baseList)){\r\n            System.err.println(\"Коллекция пуста. Команда бесполезна\");\r\n            return;\r\n        }\r\n        ComparatorLenght comparatorLenght = new ComparatorLenght();\r\n        LinkedList<DragonType> dragonTypes = new LinkedList<>();\r\n        Set<DragonType> uniqueTypes = new HashSet<>();\r\n        for (Dragon dragon : baseList) {\r\n            DragonType type = dragon.getType();\r\n            if (uniqueTypes.add(type)) { // Проверяем, добавлен ли элемент в Set\r\n                dragonTypes.add(type);\r\n            }\r\n        }\r\n        dragonTypes.sort(comparatorLenght.reversed());\r\n        for (DragonType findType : dragonTypes) {\r\n            String findTypeS = findType.toString();\r\n            for (Dragon dragon : baseList) {\r\n                if (findTypeS.equals(dragon.getType().toString())) {\r\n                    System.out.println(\" Типу \" + findTypeS + \" соответствует дракону \" + dragon.getName());\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод добавляющий драконов в коллекцию\r\n     * @see AllAdd#groupMethod()\r\n     */\r\n    public void add() {\r\n        Dragon change = allAdd.groupMethod();\r\n        baseList.add(change);\r\n        System.out.println(\"Дракон добавлен\");\r\n        System.out.println(\"Теперь коллекция содержит \"+baseList.size()+\" элементов\");\r\n        votTvoyId.votIdBad(baseList);\r\n    }\r\n\r\n//готово\r\n    /**\r\n     * Метод, обновляющий дракона по id\r\n     * @see AllAdd#groupMethod()\r\n     * @param id the id\r\n     */\r\n    public void updateId(long id) {\r\n        if(isCollectEmpty(baseList)){\r\n            System.err.println(\"Коллекция пуста. Команда бесполезна\");\r\n            return;\r\n        }\r\n        LinkedList<Long> idd =checkId(baseList);\r\n        try {\r\n            if (!idd.contains(id)) throw new NotIdException();\r\n        } catch (NotIdException e) {\r\n            System.err.println(\"Дракона с таким id не существует\");\r\n            return;\r\n        }\r\n        System.out.println(\"Введите данные драконы, на которого хотите заменить дракона с id = \" + id);\r\n        Dragon change = allAdd.groupMethod();\r\n        for (int i = 0; i < baseList.size(); i++) {\r\n            Dragon dragon = baseList.get(i);\r\n            if (baseList.get(i).getId().equals(id) & Objects.equals(dragon.getCreator(), Users.getCurrentUser())) {\r\n                baseList.set(i, change);\r\n                System.out.println(\"Дракон с ID \" + id + \" был заменен на дракона с именем \"+change.getName());\r\n                //votTvoyId.votIdBad(baseList);\r\n                return;\r\n            }\r\n        }\r\n        System.err.println(\"Дракон с ID \" + id + \" не найден в коллекции\");\r\n    }\r\n//готово\r\n    /**\r\n     * метод, который добавяет новый элемент в коллекцию, если его значение меньше, чем у наименьшего элемента этой коллекции\r\n     * @see AllAdd#groupMethod()\r\n     * @see ComparatorAge#compare(Dragon, Dragon)\r\n     */\r\n    public void addIfMin() {\r\n        if(isCollectEmpty(baseList)){\r\n            System.err.println(\"Коллекция пуста. Команда бесполезна\");\r\n            return;\r\n        }\r\n        Dragon dragon = allAdd.groupMethod();\r\n        baseList.sort(comparatorAge);\r\n        Dragon champion = baseList.get(0);\r\n        int result = comparatorAge.compare(champion, dragon);\r\n        if (!(result < 0)) {\r\n            baseList.add(dragon);\r\n            votTvoyId.votIdBad(baseList);\r\n        } else {\r\n            System.out.println(\"У наименьшего элемента коллекции значение меньше\");\r\n        }\r\n        System.out.println(\"Теперь коллекция содержит \"+baseList.size()+\" элементов\");\r\n    }\r\n\r\n    /**\r\n     * Метод, сохраняющий файл в коллекцию\r\n     * Путь к файлу задается в аргументе\r\n\r\n     * @see OutputStreamWriter#write(String)\r\n\r\n\r\n     */\r\n    //проверить повтоящиеся драконы\r\n    public void save() {\r\n        MainDataBase.requestSQLWithout(\"DELETE FROM DRAGONS;\");\r\n        for (Dragon dragon : baseList) {\r\n            System.out.println(\"Vot smotri \"+dragon.getCreationDate()+\"kkk\");\r\n            MainDataBase.requestSQLWithout(\"insert into dragons (id, creator, creationDate, name, age, color, type, weight, size, eyesCount, toothCount, x, y) values (' nextval('DRAGONSEQ') ', '\" + dragon.getCreator() + \"', '\" + dragon.getCreationDate().toString() + \"', '\" + dragon.getName() + \"', '\" + dragon.getAge() + \"', '\" + dragon.getColor() + \"', '\" + dragon.getType() + \"', '\" + dragon.getWeight() + \"', '\"+dragon.getHead().getSize()+ \"', '\"+ dragon.getHead().getEyesCount() + \"', '\"+dragon.getHead().getToothCount()+\"', '\" + dragon.getCoordinates().getX() + \"', '\" + dragon.getCoordinates().getY() + \"')\");\r\n        }\r\n        System.out.println(\"Коллекция сохранена в базе данных\");\r\n    }\r\n//готово\r\n    /**\r\n     * Метод, удаляющий дракона по index. Он задается в аргумент\r\n     * @param i the\r\n     */\r\n    public void removeIndex(int i) {\r\n        if(isCollectEmpty(baseList)){\r\n            System.err.println(\"Коллекция пуста. Команда бесполезна\");\r\n            return;\r\n        }\r\n        try {\r\n            if (i <= baseList.size() & Objects.equals(baseList.get(i).getCreator(), Users.getCurrentUser())) {\r\n                baseList.remove(i);\r\n                votTvoyId.votIdBad(baseList);\r\n                System.out.println(\"Дракон удален\");\r\n            } else {\r\n                System.err.println(\"Нет такого индекса в коллекции\");\r\n            }\r\n            System.out.println(\"Теперь коллекция содержит \"+baseList.size()+\" элементов\");\r\n        } catch (IndexOutOfBoundsException e) {\r\n            System.err.println(\"Нет такого индекса в коллекции\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод, удаляющий из коллекции все элементы, превышающие заданный\r\n     * Вы задаете команде ID дракона по которому хотите сравнивать, если хотите сравнивать по новому введите любое число(которое не является ID)\r\n     * @see AllAdd#groupMethod()\r\n     * @param id the id\r\n     */\r\n    public void removeGreater(Long id) {\r\n        boolean checkGreader = false;\r\n\r\n        if(isCollectEmpty(baseList)){\r\n            System.err.println(\"Коллекция пуста. Команда бесполезна\");\r\n            return;\r\n        }\r\n        LinkedList<Dragon> greader = new LinkedList<>();\r\n        for(Dragon dragon : baseList){\r\n            if(Objects.equals(id, dragon.getId())){\r\n            greader.add(dragon);\r\n            }\r\n        }\r\n        if(greader.size()==0) {\r\n            Dragon heRemove = allAdd.groupMethod();\r\n            greader.add(heRemove);\r\n        }\r\n        baseList.sort(Collections.reverseOrder(comparatorAge));\r\n        for (int i = 0; i < baseList.size(); i++) {\r\n            Dragon dragon = baseList.get(i);\r\n            int result = comparatorAge.compare(greader.getFirst(), dragon);\r\n            if (result < 0) {\r\n                baseList.remove(dragon);\r\n\r\n                System.out.println(dragon.getName() + \" удален\");\r\n                System.out.println(\"Теперь коллекция содержит \"+baseList.size()+\" элементов\");\r\n                checkGreader = true;\r\n            }\r\n        }\r\n        votTvoyId.votIdBad(baseList);\r\n        if(!checkGreader){\r\n            System.err.println(\"Ни один дракон не удален\");\r\n        }\r\n    }\r\n    /**\r\n     * Метод, удаляющий из коллекции все элементы, превышающие заданный\r\n     */\r\n    public void gread(double d){\r\n        boolean fact = false;\r\n        LinkedList<Integer> index = new LinkedList<>();\r\n        for(int i =0; i < baseList.size(); i++){\r\n            Dragon dragon = baseList.get(i);\r\n            if(d<dragon.getHead().getSize()){\r\n               index.add(i);\r\n               fact = true;\r\n            }\r\n        }\r\n        Iterator<Integer> iter = index.descendingIterator();\r\n        while (iter.hasNext()) {\r\n            int integer = iter.next();\r\n            if(Objects.equals(baseList.get(integer).getCreator(), Users.getCurrentUser())) {\r\n                baseList.remove(integer);\r\n            }\r\n        }\r\n        if (fact) {\r\n            System.out.println(\"Драконы удалены\");\r\n            votTvoyId.votIdBad(baseList);\r\n        } else {\r\n            System.out.println(\"Ни один дракон не удален\");\r\n        }\r\n        System.out.println(\"Теперь коллекция содержит \"+baseList.size()+\" элементов\");\r\n    }\r\n\r\n    public boolean checkCreator(Dragon dragon){\r\n        boolean eee = true;\r\n        String nameCreator = dragon.getCreator();\r\n        if(!Users.getCurrentUser().equals(nameCreator)){\r\n            System.out.println(\"Дракона, создавал не ты\");\r\n            eee = false;\r\n        }\r\n        return eee;\r\n    }\r\npublic void logOut(){\r\nUsers.setCurrentUser(null);\r\n    System.out.println(\"Вы успешно вышли из аккаунта\");\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/File/CollectionManager.java b/src/main/java/File/CollectionManager.java
--- a/src/main/java/File/CollectionManager.java	(revision 892d01258556beeaa144f3c83e0e24c6bd0b6854)
+++ b/src/main/java/File/CollectionManager.java	(date 1683921251925)
@@ -306,8 +306,8 @@
     public void save() {
         MainDataBase.requestSQLWithout("DELETE FROM DRAGONS;");
         for (Dragon dragon : baseList) {
-            System.out.println("Vot smotri "+dragon.getCreationDate()+"kkk");
-            MainDataBase.requestSQLWithout("insert into dragons (id, creator, creationDate, name, age, color, type, weight, size, eyesCount, toothCount, x, y) values (' nextval('DRAGONSEQ') ', '" + dragon.getCreator() + "', '" + dragon.getCreationDate().toString() + "', '" + dragon.getName() + "', '" + dragon.getAge() + "', '" + dragon.getColor() + "', '" + dragon.getType() + "', '" + dragon.getWeight() + "', '"+dragon.getHead().getSize()+ "', '"+ dragon.getHead().getEyesCount() + "', '"+dragon.getHead().getToothCount()+"', '" + dragon.getCoordinates().getX() + "', '" + dragon.getCoordinates().getY() + "')");
+            //System.out.println("Vot smotri "+dragon.getCreationDate()+"kkk");
+            MainDataBase.requestSQLWithout("insert into dragons (id, creator, creationDate, name, age, color, type, weight, size, eyesCount, toothCount, x, y) values (nextval('DRAGONSEQ') , '" + dragon.getCreator() + "', '" + dragon.getCreationDate().toString() + "', '" + dragon.getName() + "', '" + dragon.getAge() + "', '" + dragon.getColor() + "', '" + dragon.getType() + "', '" + dragon.getWeight() + "', '"+dragon.getHead().getSize()+ "', '"+ dragon.getHead().getEyesCount() + "', '"+dragon.getHead().getToothCount()+"', '" + dragon.getCoordinates().getX() + "', '" + dragon.getCoordinates().getY() + "')");
         }
         System.out.println("Коллекция сохранена в базе данных");
     }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"d3620ff5-2ec9-4384-9282-65768364a813\" name=\"Changes\" comment=\"save id\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Base/Dragon.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Base/Dragon.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/DataBase/SetCollection.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/DataBase/SetCollection.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/File/CollectionManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/File/CollectionManager.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2PO3OFdIFtZYkTpXMkQ3CqndaMC\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;SDKs&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;postgresql&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"d3620ff5-2ec9-4384-9282-65768364a813\" name=\"Changes\" comment=\"\" />\r\n      <created>1683314267438</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1683314267438</updated>\r\n      <workItem from=\"1683314270276\" duration=\"931000\" />\r\n      <workItem from=\"1683319043750\" duration=\"1536000\" />\r\n      <workItem from=\"1683374733426\" duration=\"5805000\" />\r\n      <workItem from=\"1683396902676\" duration=\"695000\" />\r\n      <workItem from=\"1683400241923\" duration=\"287000\" />\r\n      <workItem from=\"1683532902325\" duration=\"2265000\" />\r\n      <workItem from=\"1683555786661\" duration=\"1461000\" />\r\n      <workItem from=\"1683557489517\" duration=\"1483000\" />\r\n      <workItem from=\"1683559303100\" duration=\"661000\" />\r\n      <workItem from=\"1683577956593\" duration=\"3508000\" />\r\n      <workItem from=\"1683638424891\" duration=\"3171000\" />\r\n      <workItem from=\"1683653031301\" duration=\"1629000\" />\r\n      <workItem from=\"1683702976617\" duration=\"878000\" />\r\n      <workItem from=\"1683708267514\" duration=\"1799000\" />\r\n      <workItem from=\"1683734313148\" duration=\"104000\" />\r\n      <workItem from=\"1683746415036\" duration=\"1204000\" />\r\n      <workItem from=\"1683793957218\" duration=\"1971000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"save id\">\r\n      <created>1683747615511</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683747615511</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"save id\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"save id\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 892d01258556beeaa144f3c83e0e24c6bd0b6854)
+++ b/.idea/workspace.xml	(date 1683921494991)
@@ -6,8 +6,6 @@
   <component name="ChangeListManager">
     <list default="true" id="d3620ff5-2ec9-4384-9282-65768364a813" name="Changes" comment="save id">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Base/Dragon.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Base/Dragon.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/DataBase/SetCollection.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/DataBase/SetCollection.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/File/CollectionManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/File/CollectionManager.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -84,7 +82,8 @@
       <workItem from="1683708267514" duration="1799000" />
       <workItem from="1683734313148" duration="104000" />
       <workItem from="1683746415036" duration="1204000" />
-      <workItem from="1683793957218" duration="1971000" />
+      <workItem from="1683793957218" duration="2178000" />
+      <workItem from="1683921121313" duration="374000" />
     </task>
     <task id="LOCAL-00001" summary="save id">
       <created>1683747615511</created>
@@ -93,7 +92,14 @@
       <option name="project" value="LOCAL" />
       <updated>1683747615511</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="save id">
+      <created>1683796124680</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1683796124680</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
